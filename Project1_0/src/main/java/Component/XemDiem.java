/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Component;

import Hiberneat.Public.ThiLai;
import Login.Const;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Vector;
import javax.persistence.Query;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author admin
 */
public class XemDiem extends javax.swing.JPanel {

    JButton button = new JButton();

    public XemDiem() {
        initComponents();
        Table();
        
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SP = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();

        SP.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        Table.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã Môn", "Môn Học", "Điểm Kỳ Đầu", "Điểm Giữa Kỳ", "Điểm Cuối Kỳ", "Trung Bình", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setAlignmentX(0.0F);
        Table.setAlignmentY(0.0F);
        SP.setViewportView(Table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(SP, javax.swing.GroupLayout.DEFAULT_SIZE, 1185, Short.MAX_VALUE)
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SP, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane SP;
    private javax.swing.JTable Table;
    // End of variables declaration//GEN-END:variables

    private void Table() {
        setOpaque(false);
        Table.setShowHorizontalLines(true);
        Table.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

                TableHeader Table = new TableHeader(value + "");

                return Table;

            }

        });
        Table.setRowHeight(25);
        SP.getViewport().setBackground(Color.WHITE);

    }

    public void loadDataXemDiem() {
        Query query = Const.session.createQuery("SELECT d.MaMon,m.TenMonhoc,d.DiemDau,d.Diemgiua,d.DiemCuoi,d.Tongcuoi FROM SinhVien s join Diem d on s.MaSV = d.MaSV join Monhoc m on m.MaMonhoc = d.MaMon where s.MaSV=" + "'" + Const.user.getUserName() + "'");
        List<Object[]> ListResult = query.getResultList();
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        model.setNumRows(0);
        double i;
        for (Object[] item : ListResult) {
            Vector<Object> Vector = new Vector<>();
            Vector.add(item[0]);
            Vector.add(item[1]);
            Vector.add(item[2]);
            Vector.add(item[3]);
            Vector.add(item[4]);
            i = Double.parseDouble(item[5].toString());
            Vector.add(i);
            if (i < 5) {
                Table.getColumn("").setCellRenderer(new ButtonRenderer());
                Table.getColumn("").setCellEditor(new ButtonEditor(new JCheckBox()));
            } else {

            }
            model.addRow(Vector);;

        }

    }

    private void init() {
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int index = Table.getSelectedRow();
                if (index >= 0) {

                    int option = JOptionPane.showConfirmDialog(null, "Bạn Có Muốn Đăng Ký Thi Lại Môn Này", "Nhắc Nhở", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource("/img/icons8_warning_shield_20px_1.png")));
                    if (option == 0) {
                        if (CheckDangKyThi()) {
                            JOptionPane.showMessageDialog(null, "Bạn Đã Đăng Ký Môn Này Rồi", "Nhắc Nhở", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource("/img/icons8_ask_question_20px_3.png")));

                        } else {
                            ThiLai thiLai = new ThiLai();

                            thiLai.setMaMon(Table.getValueAt(index, 0).toString());
                            thiLai.setID(Table.getValueAt(index, 1).toString());
                            thiLai.setMaSV(Integer.parseInt(Const.user.getUserName()));
                            thiLai.setTieude("Thi Lai");
                            Const.session.getTransaction().begin();
                            Const.session.save(thiLai);
                            Const.session.getTransaction().commit();
                            Table.removeEditor();
                            JOptionPane.showMessageDialog(null, "Bạn Đã Đăng Ký Thành Công", "Nhắc Nhở", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource("/img/icons8_ask_question_20px_3.png")));
                        }

                    } else {

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Bạn Chưa chon Môn đăng Ký", "Nhắc Nhở", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource("/img/icons8_ask_question_20px_3.png")));
                }
            }
        });
    }

    //Nhom Button
    class ButtonEditor extends DefaultCellEditor {

        public ButtonEditor(JCheckBox checkBox) {

            super(checkBox);
//        setOpaque(false);
//        setBackground(Color.white);
            button.setText("");
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png")));

        }

        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {

            return button;

        }
    }

    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {

            setOpaque(true);
            setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png")));
            setText("");

        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

            return this;
        }
    }

    //Check
    private boolean CheckDangKyThi() {
        int index = Table.getSelectedRow();
        Query q = Const.session.createQuery("FROM ThiLai");
        Const.ListThiLai = q.getResultList();
        for (int i = 0; i < Const.ListThiLai.size(); i++) {
            if (Const.ListThiLai.get(i).getMaMon().equals(Table.getValueAt(index, 0).toString()) && Const.ListThiLai.get(i).getMaSV() == Integer.parseInt(Const.user.getUserName())) {
                return true;
            }

        }
        return false;
    }
}
